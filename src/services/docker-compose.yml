version: "3.8"

services:
  # Infrastructure Services
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - grub_network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - grub_network
    command: redis-server --appendonly yes

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - grub_network

  # Application Services
  frontend:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - api
    networks:
      - grub_network

  api:
    build:
      context: ./api-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - PORT=3007
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-api
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=api-service
      - KAFKA_GROUP_ID=api-service-group
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - grub_network

  auth:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - PORT=3001
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-auth
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - grub_network

  creation:
    build:
      context: ./creation-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - PORT=3002
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-creation
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - kafka
    networks:
      - grub_network

  listing:
    build:
      context: ./listing-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-listing
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - kafka
    networks:
      - grub_network

  ml:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - PORT=3004
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-ml
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - redis
      - kafka
    networks:
      - grub_network

  prediction:
    build:
      context: ./prediction-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - PORT=3005
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-prediction
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - kafka
    networks:
      - grub_network

  reservation:
    build:
      context: ./reservation-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - PORT=3006
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/grub-reservation
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      - mongodb
      - kafka
    networks:
      - grub_network

networks:
  grub_network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  kafka_data:
