version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - auth-service
      - item-service
      - ai-service
      - user-service
      - transaction-service

  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "4001:4001"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gloria_auth
      - JWT_SECRET=your_jwt_secret_here
    depends_on:
      postgres:
        condition: service_healthy

  item-service:
    build:
      context: ./services/item-service
      dockerfile: Dockerfile
    ports:
      - "4002:4002"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gloria_items
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=gloria-items
      - JWT_SECRET=your_jwt_secret_here
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully

  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    ports:
      - "4003:4003"
    environment:
      - MINIO_ENDPOINT=minio:9000
    depends_on:
      minio:
        condition: service_healthy

  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "4004:4004"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gloria_users
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  transaction-service:
    build:
      context: ./services/transaction-service
      dockerfile: Dockerfile
    ports:
      - "4005:4005"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/gloria_transactions
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=gloria_auth,gloria_items,gloria_users,gloria_transactions
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until mc alias set minio http://minio:9000 minioadmin minioadmin;
      do
        echo 'Waiting for MinIO to be ready...'
        sleep 1;
      done;
      mc mb minio/gloria-items;
      mc anonymous set download minio/gloria-items;
      exit 0;
      "

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: gloria-network
